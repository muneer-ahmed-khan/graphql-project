scalar DateTime

schema {
  query: Query
  mutation: Mutation
}

# Interface for common fields
interface Node {
  id: ID!
}

# Enums for fixed value sets
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum NotificationType {
  MESSAGE
  COMMENT
  LIKE
  FOLLOW
}

# Types and relationships
type User implements Node {
  id: ID!
  name: String!
  email: String!
  gender: Gender
  profile: Profile
  posts: [Post!]!
  comments: [Comment!]!
  likes: [Like!]!
  messagesSent: [Message!]!
  messagesReceived: [Message!]!
  notifications: [Notification!]!
}

type Profile implements Node {
  id: ID!
  bio: String
  avatarUrl: String
  user: User!
}

type Post implements Node {
  id: ID!
  title: String!
  content: String!
  status: PostStatus!
  author: User!
  comments: [Comment!]!
  likes: [Like!]!
  tags: [Tag!]!
  category: Category
}

type Comment implements Node {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

type Like implements Node {
  id: ID!
  user: User!
  post: Post!
}

type Tag implements Node {
  id: ID!
  name: String!
  posts: [Post!]!
}

type Category implements Node {
  id: ID!
  name: String!
  posts: [Post!]!
}

type Message implements Node {
  id: ID!
  sender: User!
  receiver: User!
  content: String!
  sentAt: DateTime!
}

type Notification implements Node {
  id: ID!
  user: User!
  type: NotificationType!
  message: String!
  createdAt: DateTime!
}

# Union for heterogeneous search results
union SearchResult = User | Post | Comment | Tag | Category

# Input types for mutations
input CreateUserInput {
  name: String!
  email: String!
  gender: Gender
}

input CreateProfileInput {
  userId: ID!
  bio: String
  avatarUrl: String
}

input CreatePostInput {
  title: String!
  content: String!
  status: PostStatus
  authorId: ID!
  categoryId: ID
  tags: [ID!]
}

input CreateCommentInput {
  text: String!
  authorId: ID!
  postId: ID!
}

input CreateLikeInput {
  userId: ID!
  postId: ID!
}

input SendMessageInput {
  senderId: ID!
  receiverId: ID!
  content: String!
}

# New input types for Category and Tag
input CreateCategoryInput {
  name: String!
  postIds: [ID!]
}

input CreateTagInput {
  name: String!
  postIds: [ID!]
}

input CreateNotificationInput {
  userId: ID!
  type: NotificationType!
  message: String!
}

# Root Query
type Query {
  node(id: ID!): Node
  search(text: String!): [SearchResult!]!
  getUser(id: ID!): User
  getPost(id: ID!): Post
  getCategory(id: ID!): Category
  getCategories: [Category!]!
  getTag(id: ID!): Tag
  getTags: [Tag!]!
  getMessagesSent(userId: ID!): [Message!]!
  getMessagesReceived(userId: ID!): [Message!]!
  getNotifications(userId: ID!): [Notification!]!
}

# Root Mutation
type Mutation {
  createUser(input: CreateUserInput!): User!
  createProfile(input: CreateProfileInput!): Profile!
  createPost(input: CreatePostInput!): Post!
  createComment(input: CreateCommentInput!): Comment!
  likePost(input: CreateLikeInput!): Like!
  sendMessage(input: SendMessageInput!): Message!
  createCategory(input: CreateCategoryInput!): Category!
  createTag(input: CreateTagInput!): Tag!
  createNotification(input: CreateNotificationInput!): Notification!
}
